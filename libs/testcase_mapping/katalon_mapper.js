/**
 * Ïπ¥ÌÉàÎ°† Ïä§ÌÅ¨Î¶ΩÌä∏ Îß§Ìïë Ï†ÑÏö© Î™®Îìà
 * testcase_mapper.jsÏóêÏÑú Î∂ÑÎ¶¨Îêú Îß§Ìïë Í∏∞Îä•
 * 
 * Ï±ÖÏûÑ:
 * - ÌÇ§ÏõåÎìú Í∏∞Î∞ò Îß§Ìïë Í≤ÄÏÉâ
 * - Ïπ¥ÌÉàÎ°† Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * - ÏÑπÏÖòÎ≥Ñ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * - ÌÜµÌï© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * 
 * ÏùòÏ°¥ÏÑ±: katalon_mapping_complete.js (KATALON_MAPPING_COMPLETE Î∞∞Ïó¥)
 * ÏÉùÏÑ±Ïùº: 2025ÎÖÑ 6Ïõî 13Ïùº
 */

// ================================
// Ïπ¥ÌÉàÎ°† Îß§Ìïë Í∏∞Îä•
// ================================

/**
 * ÏÑπÏÖòÎ≥Ñ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * @param {string} sectionName - ÏÑπÏÖò Ïù¥Î¶Ñ
 * @param {array} textArray - ÌÖçÏä§Ìä∏ Î∞∞Ïó¥
 * @returns {string} ÏÉùÏÑ±Îêú Ïä§ÌÅ¨Î¶ΩÌä∏
 */
function generateSectionScript(sectionName, textArray) {
    if (!textArray || textArray.length === 0) {
        return `// === ${sectionName} Scripts ===\n// No content found for ${sectionName}\n\n`;
    }
    
    let script = `// === ${sectionName} Scripts ===\n`;
    
    textArray.forEach((text, index) => {
        if (!text || text.trim() === '') return;
        
        // Îã§Ï§ë ÎùºÏù∏ ÌÖçÏä§Ìä∏Î•º Ï£ºÏÑùÏúºÎ°ú Ï≤òÎ¶¨ (Í∞Å Ï§ÑÎßàÎã§ // Ï∂îÍ∞Ä)
        const commentedText = text.split('\n').map(line => `// ${sectionName} ${index + 1}: ${line.trim()}`).join('\n');
        script += `${commentedText}\n`;
        
        const keywords = extractKeywordsForMapping(text);
        const mappings = findMappingsForKeywords(keywords);
        
        if (mappings.length > 0) {
            mappings.forEach(mapping => {
                script += generateKatalonScript(mapping, text);
            });
        } else {
            script += `// TODO: No mapping found for: "${text.replace(/\n/g, ' ')}"\n`;
            script += `// Keywords extracted: ${keywords.join(', ')}\n`;
        }
        
        script += '\n';
    });
    
    return script;
}

/**
 * ÌÇ§ÏõåÎìúÏóê ÎåÄÌïú Îß§Ìïë Ï∞æÍ∏∞
 * @param {array} keywords - Í≤ÄÏÉâÌï† ÌÇ§ÏõåÎìú Î∞∞Ïó¥
 * @returns {array} Ï∞æÏùÄ Îß§Ìïë Î∞∞Ïó¥
 */
function findMappingsForKeywords(keywords) {
    console.log('üîç Îß§Ìïë Í≤ÄÏÉâ ÏãúÏûë, ÌÇ§ÏõåÎìú:', keywords);
    
    // Ïó¨Îü¨ Î∞©ÏãùÏúºÎ°ú Îß§Ìïë Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º ÏãúÎèÑ
    let mappingData = null;
    let dataSource = '';
    
    // 1ÏàúÏúÑ: window Í∞ùÏ≤¥ÏóêÏÑú ÌôïÏù∏
    if (typeof window !== 'undefined' && window.KATALON_MAPPING_COMPLETE) {
        mappingData = window.KATALON_MAPPING_COMPLETE;
        dataSource = 'window.KATALON_MAPPING_COMPLETE';
    }
    // 2ÏàúÏúÑ: ÏßÅÏ†ë Ï†ÑÏó≠ Î≥ÄÏàò ÌôïÏù∏
    else if (typeof KATALON_MAPPING_COMPLETE !== 'undefined') {
        mappingData = KATALON_MAPPING_COMPLETE;
        dataSource = 'KATALON_MAPPING_COMPLETE';
    }
    // 3ÏàúÏúÑ: ÌÜµÌï© Îß§Ìïë Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    else if (typeof window !== 'undefined' && window.FINAL_INTEGRATED_MAPPING) {
        mappingData = window.FINAL_INTEGRATED_MAPPING;
        dataSource = 'window.FINAL_INTEGRATED_MAPPING';
    }
    // 4ÏàúÏúÑ: Í∞ïÏ†úÎ°ú Ïû¨ÏãúÎèÑ
    else {
        console.warn('‚ö†Ô∏è Îß§Ìïë Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïû¨ÏãúÎèÑ Ï§ë...');
        
        // 0.5Ï¥à ÌõÑ Ïû¨ÏãúÎèÑ
        setTimeout(() => {
            console.log('üîÑ Îß§Ìïë Îç∞Ïù¥ÌÑ∞ Ïû¨ÏãúÎèÑ...');
            return findMappingsForKeywords(keywords);
        }, 500);
        
        return [];
    }
    
    if (!mappingData || !Array.isArray(mappingData)) {
        console.error('‚ùå Îß§Ìïë Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§:', mappingData);
        console.error('üìã ÌòÑÏû¨ Ï†ÑÏó≠ Î≥ÄÏàòÎì§:');
        if (typeof window !== 'undefined') {
            Object.keys(window).filter(key => key.includes('KATALON')).forEach(key => {
                console.log('  -', key, ':', typeof window[key], window[key] ? `(${Array.isArray(window[key]) ? window[key].length : 'not array'})` : '');
            });
        }
        return [];
    }
    
    console.log('‚úÖ Îß§Ìïë Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨:', mappingData.length, 'Í∞ú (Ï∂úÏ≤ò:', dataSource, ')');
    
    const foundMappings = [];
    const usedActions = new Set();
    
    keywords.forEach(keyword => {
        if (!keyword || typeof keyword !== 'string') return;
        
        const mapping = mappingData.find(m => {
            if (!m || !m.keywords || !Array.isArray(m.keywords)) return false;
            
            return m.keywords.some(k => {
                if (!k || typeof k !== 'string') return false;
                return k.includes(keyword.toLowerCase()) || 
                       keyword.toLowerCase().includes(k);
            });
        });
        
        if (mapping && mapping.action && !usedActions.has(mapping.action)) {
            foundMappings.push(mapping);
            usedActions.add(mapping.action);
            console.log('üéØ Îß§Ìïë Î∞úÍ≤¨:', keyword, '‚Üí', mapping.action);
        }
    });
    
    console.log('üìä Ï¥ù Îß§Ìïë Í≤∞Í≥º:', foundMappings.length, 'Í∞ú');
    return foundMappings;
}

/**
 * Îß§ÌïëÏö© ÌÇ§ÏõåÎìú Ï∂îÏ∂ú (TestcaseParserÏùò extractKeywordsÏôÄ ÎèôÏùºÌïòÏßÄÎßå ÎèÖÎ¶ΩÏÑ±ÏùÑ ÏúÑÌï¥ Î∂ÑÎ¶¨)
 * @param {string} text - Î∂ÑÏÑùÌï† ÌÖçÏä§Ìä∏
 * @returns {array} Ï∂îÏ∂úÎêú ÌÇ§ÏõåÎìú Î∞∞Ïó¥
 */
function extractKeywordsForMapping(text) {
    if (!text) return [];
    
    const words = text
        .replace(/[^\w\s„Ñ±-„ÖéÍ∞Ä-Ìû£]/g, ' ')
        .split(/\s+/)
        .filter(word => word.length > 1)
        .map(word => word.toLowerCase());
    
    return [...new Set(words)];
}

/**
 * Ïπ¥ÌÉàÎ°† Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * @param {object} mapping - Îß§Ìïë Í∞ùÏ≤¥
 * @param {string} originalText - ÏõêÎ≥∏ ÌÖçÏä§Ìä∏
 * @returns {string} ÏÉùÏÑ±Îêú Ïπ¥ÌÉàÎ°† Ïä§ÌÅ¨Î¶ΩÌä∏
 */
function generateKatalonScript(mapping, originalText) {
    const action = mapping.action;
    const type = mapping.type;
    
    let script = '';
    
    switch (type) {
        case 'action':
            if (action === 'Click') {
                script += `WebUI.click(findTestObject('Object Repository/Page_/btn_click'))\n`;
            } else if (action === 'Submit') {
                script += `WebUI.click(findTestObject('Object Repository/Page_/btn_submit'))\n`;
            } else if (action === 'Upload File') {
                script += `WebUI.uploadFile(findTestObject('Object Repository/Page_/input_file'), '/path/to/file')\n`;
            } else if (action === 'Open Browser') {
                script += `WebUI.openBrowser('')\n`;
            } else {
                script += `WebUI.${action.toLowerCase().replace(/\s+/g, '')}(findTestObject('Object Repository/Page_/element'))\n`;
            }
            break;
            
        case 'input':
            if (action === 'Set Text') {
                script += `WebUI.setText(findTestObject('Object Repository/Page_/input_text'), 'test_value')\n`;
            } else if (action === 'Set Encrypted Text') {
                script += `WebUI.setEncryptedText(findTestObject('Object Repository/Page_/input_password'), 'encrypted_password')\n`;
            }
            break;
            
        case 'verification':
            if (action === 'Get Text') {
                script += `String actualText = WebUI.getText(findTestObject('Object Repository/Page_/text_element'))\n`;
                script += `WebUI.verifyMatch(actualText, 'expected_text', false)\n`;
            } else if (action === 'Get Attribute') {
                script += `String attributeValue = WebUI.getAttribute(findTestObject('Object Repository/Page_/element'), 'attribute_name')\n`;
                script += `WebUI.verifyMatch(attributeValue, 'expected_value', false)\n`;
            } else if (action === 'Verify Element Attribute Value') {
                script += `WebUI.verifyElementAttributeValue(findTestObject('Object Repository/Page_/element'), 'attribute', 'expected_value', 30)\n`;
            }
            break;
            
        case 'selection':
            if (action === 'Select Option By Label') {
                script += `WebUI.selectOptionByLabel(findTestObject('Object Repository/Page_/select_dropdown'), 'option_label', false)\n`;
            }
            break;
            
        case 'checkbox':
            if (action === 'Check') {
                script += `WebUI.check(findTestObject('Object Repository/Page_/checkbox_element'))\n`;
            }
            break;
            
        case 'alert':
            if (action === 'Accept Alert') {
                script += `WebUI.acceptAlert()\n`;
            }
            break;
            
        case 'navigation':
            if (action === 'Navigate To') {
                script += `WebUI.navigateToUrl('https://example.com')\n`;
            } else if (action === 'Back') {
                script += `WebUI.back()\n`;
            } else if (action === 'Forward') {
                script += `WebUI.forward()\n`;
            }
            break;
            
        default:
            script += `// ${action} - Implementation needed\n`;
    }
    
    return script;
}

/**
 * ÌÜµÌï© Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
 * @param {string} preconditionScript - Precondition Ïä§ÌÅ¨Î¶ΩÌä∏
 * @param {string} summaryScript - Summary Ïä§ÌÅ¨Î¶ΩÌä∏
 * @param {string} expectedResultScript - Expected Result Ïä§ÌÅ¨Î¶ΩÌä∏
 * @returns {string} ÌÜµÌï©Îêú Ïä§ÌÅ¨Î¶ΩÌä∏
 */
function createIntegratedScript(preconditionScript, summaryScript, expectedResultScript) {
    const header = `// ========================================\n// Katalon Mapping Script Generated\n// Generated at: ${new Date().toLocaleString()}\n// ========================================\n\n`;
    
    const testCaseStart = `@Test\ndef testCase() {\n    try {\n        // Test case execution\n\n`;
    
    const testCaseEnd = `\n    } catch (Exception e) {\n        WebUI.comment("Test failed: " + e.getMessage())\n        throw e\n    } finally {\n        WebUI.closeBrowser()\n    }\n}\n`;
    
    const indentedPrecondition = indentScript(preconditionScript);
    const indentedSummary = indentScript(summaryScript);
    const indentedExpectedResult = indentScript(expectedResultScript);
    
    return header + testCaseStart + indentedPrecondition + indentedSummary + indentedExpectedResult + testCaseEnd;
}

/**
 * Ïä§ÌÅ¨Î¶ΩÌä∏ Îì§Ïó¨Ïì∞Í∏∞
 * @param {string} script - Îì§Ïó¨Ïì∞Í∏∞Ìï† Ïä§ÌÅ¨Î¶ΩÌä∏
 * @returns {string} Îì§Ïó¨Ïì∞Í∏∞Îêú Ïä§ÌÅ¨Î¶ΩÌä∏
 */
function indentScript(script) {
    return script.split('\n').map(line => {
        if (line.trim() === '') return line;
        return '        ' + line;
    }).join('\n');
}

/**
 * Îß§Ìïë Í∞ÄÎä• Ïó¨Î∂Ä Ï≤¥ÌÅ¨
 * @param {array} keywords - ÌÇ§ÏõåÎìú Î∞∞Ïó¥
 * @returns {boolean} Îß§Ìïë Í∞ÄÎä• Ïó¨Î∂Ä
 */
function hasAvailableMappings(keywords) {
    const mappings = findMappingsForKeywords(keywords);
    return mappings.length > 0;
}

/**
 * Îß§Ìïë ÌÜµÍ≥Ñ Ï†ïÎ≥¥
 * @param {array} keywords - ÌÇ§ÏõåÎìú Î∞∞Ïó¥
 * @returns {object} Îß§Ìïë ÌÜµÍ≥Ñ
 */
function getMappingStatistics(keywords) {
    const mappings = findMappingsForKeywords(keywords);
    return {
        totalKeywords: keywords.length,
        mappedKeywords: mappings.length,
        mappingRate: keywords.length > 0 ? (mappings.length / keywords.length * 100).toFixed(1) : 0,
        mappings: mappings
    };
}

// ================================
// Export (Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤ΩÏö©)
// ================================

// Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤ΩÏóêÏÑú Ï†ÑÏó≠ Í∞ùÏ≤¥Ïóê Ìï®ÏàòÎì§ÏùÑ ÎÖ∏Ï∂ú
if (typeof window !== 'undefined') {
    window.KatalonMapper = {
        generateSectionScript,
        findMappingsForKeywords,
        extractKeywordsForMapping,
        generateKatalonScript,
        createIntegratedScript,
        indentScript,
        hasAvailableMappings,
        getMappingStatistics
    };
}

// Node.js ÌôòÍ≤Ω ÏßÄÏõê
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        generateSectionScript,
        findMappingsForKeywords,
        extractKeywordsForMapping,
        generateKatalonScript,
        createIntegratedScript,
        indentScript,
        hasAvailableMappings,
        getMappingStatistics
    };
}

console.log('‚úÖ katalon_mapper.js Î™®Îìà Î°úÎìú ÏôÑÎ£å');